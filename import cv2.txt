import cv2
import matplotlib.pyplot as plt
import numpy as np
img=cv2.imread('au.png')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
# k1=np.array([[0,0,0],[0,1,0],[0,0,0]])
k1=np.array([[-1,-1,-1],[-1,12,-1],[-1,-1,-1]])
k1output=cv2.filter2D(img,-1,k1)
plt.subplot(1,2,1),plt.imshow(img),plt.axis('off')
plt.subplot(1,2,2),plt.imshow(k1output),plt.axis('off')




#bulring an image
import cv2
import matplotlib.pyplot as plt
import numpy as np
img=cv2.imread('au.png')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
k1=np.ones((4,4),np.float32)/16
img1=cv2.filter2D(img,-1,k1)
plt.subplot(1,2,1),plt.imshow(img),plt.axis('off')
plt.subplot(1,2,2),plt.imshow(img1),plt.axis('off')


#applying different types of blur efffect
import cv2
import matplotlib.pyplot as plt
import numpy as np
img=cv2.imread('tree.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)

#bok blur
box=cv2.blur(img,(10,10))#we can take any positive number.as the number increases the effect increases
plt.subplot(1,2,1),plt.imshow(img),plt.title('Source image')
plt.subplot(1,2,2),plt.imshow(box),plt.title('box blur effect')



#applying different types of blur efffect
#gaussian blur
import cv2
import matplotlib.pyplot as plt
img=cv2.imread('tree.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)

##gaussian blur
box=cv2.GaussianBlur(img,(-12,-12),10)#we can take any odd number.as the number increases, the effect increases.
                                     #0 calculates the effect of blur by itself.you can have any number in place of 0.

plt.subplot(1,2,1),plt.imshow(img),plt.title('Source image')
plt.subplot(1,2,2),plt.imshow(box),plt.title('GaussianBlur blur effect')


#applying different types of blur efffect
#median blur
import cv2
import matplotlib.pyplot as plt
img=cv2.imread('tree.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)

#median blur
medi=cv2.medianBlur(img,1)#we can take any positive number.as the number increases, the effect increases.
                                   
plt.subplot(1,2,1),plt.imshow(img),plt.title('Source image')
plt.subplot(1,2,2),plt.imshow(medi),plt.title('median blur effect')



#applying different types of blur efffect
import cv2
import matplotlib.pyplot as plt
img=cv2.imread('tree.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)

#bok blur
box=cv2.blur(img,(10,10))#we can take any positive number.as the number increases the effect increases

##gaussian blur
gaus=cv2.GaussianBlur(img,(-12,-12),10)#we can take any odd number.as the number increases, the effect increases.
                                     #0 calculates the effect of blur by itself.you can have any number in place of 0.

#median blur
medi=cv2.medianBlur(img,1)#we can take any positive number.as the number increases, the effect increases.

plt.figure(figsize=(10,3))
plt.subplot(2,2,1),plt.imshow(img),plt.title('Source image')
plt.subplot(2,2,2),plt.imshow(box),plt.title('box blur effect')
plt.subplot(2,2,3),plt.imshow(gaus),plt.title('GaussianBlur blur effect')
plt.subplot(2,2,4),plt.imshow(medi),plt.title('median blur effect')







#Motion blur
import cv2
import matplotlib.pyplot as plt
import numpy as np
img=cv2.imread('tree.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
size=30

#1).harizontal blur
k1=np.zeros((size,size))
k1[int(size/2),:]=np.ones(size)
k1=k1/size
horizontal=cv2.filter2D(img,-1,k1)

#2)vertical blur
k2=np.zeros((size,size))
k2[:,int(size/2)]=np.ones(size)
k2=k2/size

horizontal=cv2.filter2D(img,-1,k1)
vertical=cv2.filter2D(img,-1,k2)
plt.figure(figsize=(10,3))
plt.subplot(1,3,1),plt.imshow(img),plt.title('Source image')
plt.subplot(1,3,2),plt.imshow(horizontal),plt.title('horizontal image')
plt.subplot(1,3,3),plt.imshow(vertical),plt.title('vertical image')


#edge detection
import cv2
import matplotlib.pyplot as plt
img=cv2.imread('tiger.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)#Edge detection works on intensity values,not on color.so COLOR_BGR2GRAY is used

#sobel(image,ddepth,x,y,kernel_size)
sobelx=cv2.sobel(img,cv2.CV_64F,1,0,10)
sobelY=cv2.sobel(img,cv2.CV_64F,0,1,10)

sobel_combined=c2.magnitude(sobelx,sobely)#the magnitude combines strong edges regardless of horizontal of vertical

#ploting the image
plt.figure(figsize=(10,6))
plt.subplot(1,4,1),plt.imshow(img),plt.title('Source image'),plt.axis('off')
plt.subplot(1,4,2),plt.imshow(sobelx,cmap='gray'),plt.title('sobelx image'),plt.axis('off')
plt.subplot(1,4,2),plt.imshow(sobely,cmap='gray'),plt.title('sobely image'),plt.axis('off')
plt.subplot(1,4,2),plt.imshow(sobel_combined,cmap='gray'),plt.title('sobel_combined image'),plt.axis('off')




#edge detection
import cv2
import matplotlib.pyplot as plt
img=cv2.imread('tiger.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)#Edge detection works on intensity values,not on color.so gary image is better option.

##gaussian blur
Gaussian=cv2.GaussianBlur(img,(3,3),0)

#laplacian(src,ddepth,ksize)
laplacian=cv2.Laplacian(img,cv2.CV_64F,ksize=3)
laplacian=cv2.convertScaleAbs(laplacian)

laplacian_b=cv2.Laplacian(Gaussian,cv2.CV_64F,ksize=3)
laplacian_b=cv2.convertScaleAbs(laplacian_b)

#ploting the image
plt.subplot(1,3,1),plt.imshow(img),plt.title('Source image'),plt.axis('off')
plt.subplot(1,3,2),plt.imshow(laplacian,cmap='gray'),plt.title('laplacian image'),plt.axis('off')
plt.subplot(1,3,3),plt.imshow(laplacian_b,cmap='gray'),plt.title('laplacian_b image'),plt.axis('off')



#edge detection
import cv2
import matplotlib.pyplot as plt
img=cv2.imread('tiger.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)#Edge detection works on intensity values,not on color.so gary image is better option.

#gaussian blur
Gaussian=cv2.GaussianBlur(img,(3,3),0)

#canny (image ,threshould1,threshould2)
canny=cv2.Canny(Gaussian,threshould1=50,threshould2=150)

#ploting the imag

plt.figure(figsize=(10,6))
plt.subplot(1,2,1),plt.imshow(img),plt.title('source image'),plt.axis('off')
plt.subplot(1,2,2),plt.imshow(canny,cmap='gray'),plt.title('canny image'),plt.axis('off')


#image sharpenting
import cv2
import matplotlib.pyplot as plt
import numpy as np
img=cv2.imread('mountain.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)

k1=np.array([[-1,-1,-1],[-1,10,-1],[-1,-1,-1]])
k2=np.array([[1,1,1],[1,-7,1],[1,1,1]])
k3=np.array([[-1,-1,-1,-1,-1],[-1,2,2,2,-1],[-1,2,8,2,-1],[-1,2,2,2,-1],[-1,-1,-1,-1,-1]])/8
k4=np.array([[0,-1,0],[-1,6,-1],[0,-1,0]])

k1_img=cv2.filter2D(img,-1,k1)
k2_img=cv2.filter2D(img,-1,k2)
k3_img=cv2.filter2D(img,-1,k3)
k4_img=cv2.filter2D(img,-1,k4)

plt.figure(figsize=(10,6))
plt.subplot(2,3,1),plt.imshow(img),plt.title('source image'),plt.axis('off')
plt.subplot(2,3,2),plt.imshow(k1_img),plt.title('image after applying k1'),plt.axis('off')
plt.subplot(2,3,3),plt.imshow(k2_img),plt.title('image after applying k2'),plt.axis('off')
plt.subplot(2,3,4),plt.imshow(k3_img),plt.title('image after applying k3'),plt.axis('off')
plt.subplot(2,3,5),plt.imshow(k4_img),plt.title('image after applying k4'),plt.axis('off')




#image sharpenting
#using gaussian kernal
import cv2
import matplotlib.pyplot as plt
import numpy as np
img=cv2.imread('mountain.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)

gauss_blur=cv2.GaussianBlur(img,(5,5),0)
sharp_img=cv2.addWeighted(img,1.5,gauss_blur,-0.5,0)

k4=np.array([[0,-1,0],[-1,5,-1],[0,-1,0]])
k4_img=cv2.filter2D(img,-1,k4)

plt.figure(figsize=(10,6))
plt.subplot(2,3,1),plt.imshow(img),plt.title('source image'),plt.axis('off')
plt.subplot(2,3,2),plt.imshow(k4_img),plt.title('image after applying k4'),plt.axis('off')
plt.subplot(2,3,3),plt.imshow(sharp_img),plt.title('image after applying GaussianBlur kernel'),plt.axis('off')

plt.savefig('Enhanced_img.jpg')